{
  "name": "Try-js",
  "tagline": "Type/construct for handling errors in Node.js.",
  "body": "# try-js\r\nType / construct for handling errors in Node.js, inspired by Scala's Try type.\r\n\r\n[![Build Status](https://travis-ci.org/whirlwin/try-js.svg?branch=master)](https://travis-ci.org/whirlwin/try-js)\r\n\r\nExample usage #1, happy case:\r\n```javascript\r\nvar Try = require(\"try-js\");\r\n\r\nvar result = Try.of(() => 10)\r\n    .map(res => res + 10)\r\n    .resolve(res => res,\r\n             err => -1);\r\n\r\nconsole.log(result); // Prints 20\r\n```\r\n\r\nExample usage #2, failure case:\r\n```javascript\r\nvar Try = require(\"try-js\");\r\n\r\nvar result = Try.of(() => { throw new Error(\"Internal failure\") })\r\n    .map(res => res + 10 )\r\n    .resolve(res => res,\r\n             err => -1);\r\n\r\nconsole.log(result); // Prints -1\r\n```\r\n\r\n## Functions\r\n\r\n###### Try.of(computeFn) - Returns new Try instance\r\nAccepts a function resulting in failure or success\r\n\r\n###### Try.success(value) - Returns a new success based Try\r\nAccepts a value\r\n\r\n###### Try.failure(err) - Returns a new failure based Try\r\nAccepts an error\r\n\r\n###### Try.filter(filterFn) - Returns a success or failure based Try\r\nAccepts a predicate that leads to a failure or success\r\n\r\n###### .flatMap(flatMapFn) - Returns a flat mapped value\r\nAccepts a function that transforms a nested Try\r\n\r\n###### .getOrElse(defaultValue) - Returns the value or default value\r\nAccepts a default value which is returned in case of failure, otherwise the value is returned\r\n\r\n###### .isFailure() - Returns a boolean\r\nReturns whether the Try is a Failure or not\r\n\r\n###### .isSuccess() - Returns a boolean\r\nReturns whether the Try is a Success or not\r\n\r\n###### .map(mapFn) - Returns mapped value\r\nAccepts function that transforms a value\r\n\r\n###### .orElse(tryFn) - Returns a new try\r\nAccepts a function with a try for Failure mapping\r\n\r\n###### .peek(peekFn) - Returns itself (*deprecated: use onSuccess instead*)\r\nAccepts a function used to peek at a success value without modifying the value\r\n\r\n###### .peekFailure(peekFailureFn) - Returns itself (*deprecated: use onFailure instead*)\r\nAccepts a function used to peek at a failure value without modifying the value\r\n\r\n###### .resolve(successFn, failureFn) - Returns the success value or failure value\r\nAccepts a success and failure function used to [fold](https://en.wikipedia.org/wiki/Fold_(higher-order_function) the Try to a single return value\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}